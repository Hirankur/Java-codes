1)
public class Room{
    int roomno;
    String roomtype;
    float roomarea;
    boolean ACmachine;

    void setdata(int m, String n, float o, boolean p) {
        this.roomno = m;
        this.roomtype = n;
        this.roomarea = o;
        this.ACmachine = p;
    }
    void displaydata()
    {
        System.out.println("Room no. " + roomno);
        System.out.println("Room Type : " + roomtype);
        System.out.println("Room Area : " + roomarea);
        System.out.println("AC : " + ACmachine);
    }
    public static void main(String[] args) {

        Room obj = new Room();
        obj.setdata(220, "Wide", 150.55f, true);
        obj.displaydata();
    }
}

2)
Public class Simpleobject {

    //constructor
    public Simpleobject()
    {
        System.out.println("Hello,simple object is created.");
    }
    public static void main(String[] args)
    {
        Simpleobject obj = new Simpleobject();
    }
}

3)
public class Car
{
    int production_year;
    String model_name;

    public Car(int p_year,String model)
    {
       this.production_year=p_year; //use of this
       this.model_name=model;
    }
    void display()
    {
        System.out.println("Production Year : "+production_year+"\n"+"Model Name : "+model_name);
    }
    public static void main(String[] args) {
        Car obj = new Car(1967,"F-5918");
        obj.display();
    }
}

4)
public class X
   {
    int a = 500;
    }

public class Y extends X
    {
        int a = 200;
        void display()
        {
            System.out.println(super.a); //use of super keyword
        }

    public static void main(String[] args) {
        Y obj = new Y();
        obj.display();
    }
}

5)
//Method overloading
public class Vehicle
   {

    void info(String type)
    {
        System.out.println("The Vehicle type is : "+type);
    }
    void info(String name,String speed){
        System.out.println("Name : "+name+","+"Top Speed is "+speed);
    }
    public static void main(String[] args){
        Vehicle obj = new Vehicle();
        obj.info("Car");
        obj.info("Lamborghini","450kmph");
    }
    }

6)
public class A
{
    void sameMethod()
    {
        System.out.println("A is faster");
    }
}
public class B extends A{
    void sameMethod()
    {
        System.out.println("B is slower");
    }
    public static void main(String[] args)
    {
        B obj = new B();
        obj.sameMethod();
    }
}

7)
public class Shape
{
    void draw()
    {
        System.out.println("Drawing");
    }
    void erase()
    {
        System.out.println("Erasing");
    }
    }

class Circle extends Shape{
    void draw()
    {
        System.out.println("Drawing circle.");
    }
    void erase()
    {
        System.out.println("Erasing Circle.");
    }
}

class Triangle extends Shape{
    void draw()
    {
        System.out.println("Drawing triangle.");
    }
    void erase()
    {
        System.out.println("Erasing triangle.");
    }
}

class Square extends Shape{
    void draw()
    {
        System.out.println("Drawing square.");
    }
    void erase()
    {
        System.out.println("Erasing square.");
    }
}

public class Main {
        public static void main(String args[]){
            Square obj1 =new Square();
            obj1.draw();
            obj1.erase();
            Circle obj2 =new Circle();
            obj2.draw();
            obj2.erase();
            Triangle obj3 =new Triangle();
            obj3.draw();
            obj3.erase();
        }
}

8)
public abstract class Weapon
{

    public abstract void recoil();
}

public class AK47 extends Weapon {

    public void recoil()
    {
        System.out.println("AK47 shoots with high recoil.");
    }

    public static void main(String[] args) {
        AK47 obj = new AK47();
        obj.recoil();
    }
}

9)
public interface A {

    public void meth1();
    public void meth2();
}

public class MyClass implements A {

    public void meth1()
    {
        System.out.println("Implements method1.");
    }
    public void meth2()
    {
        System.out.println("Implements method2.");
    }
    public static void main(String[] args)
    {
        MyClass obj = new MyClass();
        obj.meth1();
        obj.meth2();
    }
}

10)

public interface A {

    public void meth1();
}

public interface B {

    public void meth2();
}

public class MyClass implements A,B {

    public void meth1()
    {
        System.out.println("Implements method1.");
    }
    public void meth2()
    {
        System.out.println("Implements method2.");
    }
    public static void main(String[] args)
    {
        MyClass obj = new MyClass();
        obj.meth1();
        obj.meth2();
    }
}

11)

public interface Test {

    public void square(int x);
}

public class Arithmetic implements Test {

    public void square(int x)
    {
        System.out.println("The square is : " + x * x);
    }
}

public class ToTestInt
{

    public static void main(String[] args)
      {
            Arithmetic obj = new Arithmetic();
          obj.square(5);
       }
}

12)

public class ColourChecking {
    private int red;
    private int green;
    private int blue;

    public ColourChecking(int red, int green, int blue) {
        this.red = red;
        this.green = green;
        this.blue = blue;
    }

    public double[] calculateHSB() {
        double r = red / 255.0;
        double g = green / 255.0;
        double b = blue / 255.0;

        double max = Math.max(Math.max(r, g), b);
        double min = Math.min(Math.min(r, g), b);
        double delta = max - min;

        double hue, saturation, brightness;

        // Calculate Hue
        if (delta == 0) {
            hue = 0;
        } else if (max == r) {
            hue = ((g - b) / delta) % 6;
        } else if (max == g) {
            hue = ((b - r) / delta) + 2;
        } else {
            hue = ((r - g) / delta) + 4;
        }
        hue *= 60;

        // Calculate Saturation
        if (max == 0) {
            saturation = 0;
        } else {
            saturation = delta / max;
        }

        // Calculate Brightness
        brightness = max;

        return new double[]{hue, saturation, brightness};
    }

    public static void main(String[] args) {
        ColourChecking color = new ColourChecking(193, 255, 183);
        double[] hsb = color.calculateHSB();

        System.out.println("Hue: " + hsb[0]);
        System.out.println("Saturation: " + hsb[1]);
        System.out.println("Brightness: " + hsb[2]);
    }
}


13)

public class FibonacciCheck {
        static int n1=0,n2=1,n3=0;
        static void fibonacci(int count)
      {
            if(count>0)
          {
                n3 = n1 + n2;
                n1 = n2;
                n2 = n3;
                System.out.print(" "+n3);
                  fibonacci(count-1);
            }
        }
        public static void main(String args[]){
            int count=10;
            System.out.print(n1+" "+n2);
            fibonacci(count-2);
          }
        }

14)

package Mypack;

public class Point {
    private int x;
    private int y;

    public Point() {}


    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void setX(int x)
    {
        this.x = x;
    }

    public void setY(int y)
    {
        this.y = y;
    }

    public void setXY(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public int getX()
    {
        return x;
    }

    public int getY()
    {
        return y;
    }
    public int getXY()
    {
      return x+y;
    }

}


import Mypack.Point;
public class Main {
    public static void main(String[] args) {
        Point obj1 = new Point(2,3);
        System.out.println("X : " + obj1.getX() + ", Y : " + obj1.getY()+" And XY : "+obj1.getXY() );

    }
}

15)

public class Box {
     double length;
     double breadth;

    public Box(double length, double breadth)
    {
        this.length = length;
        this.breadth = breadth;
    }

    public void setValue(double length, double breadth)
    {
        this.length = length;
        this.breadth = breadth;
    }

    public double Area()
    {
        return length * breadth;
    }
}

public class Box3D extends Box {
     double height;

    public Box3D(double length, double breadth, double height) {
        super(length, breadth);
        this.height = height;
    }

    public void setValue(double length, double breadth, double height)
    {
        super.setValue(length, breadth);
        this.height = height;
    }


    public double Volume()
    {
        return length * breadth * height;
    }

}

public class Main {
    public static void main(String[] args)
    {
        Box obj1 = new Box(5, 5);
        Box3D obj2 = new Box3D(3, 4, 5);

        System.out.println("Area of the Boc : " + obj1.Area());

        System.out.println("Area of the Box3D : " + obj2.Area());
        System.out.println("Volume of the Box3D : " + obj2.Volume());


    }
}


16)
public class Car {
    public String model;     
    public String company;
    public void drive()
    {
        System.out.println("Driving");
    }
    public void stop()
    {
        System.out.println("Stopping");
    } 
}

public class Volvo extends Car{
    public double price;
    public String productionYear,registrationNumber;
    Engine engine;
    Dashboard dashboard;

    public Volvo(double price,String productionYear,String registrationNumber,
                 Engine engine,Dashboard dashboard)
    {
        this.price = price;
        this.productionYear = productionYear;
        this.registrationNumber = registrationNumber;
        this.engine = engine;
        this.dashboard = dashboard;
    }
    public void changeFuel()
    {
        System.out.println("Changing Fuel");
    }
    public void checkBattery()
    {
        System.out.println("Checking Battery");
    }
}
public class Engine {
    public double capacity;

    public Engine(double capacity)
    {
        this.capacity=capacity;
    }
}
public class Dashboard {
    public double size;

    public Dashboard(double size)
    {
        this.size=size;
    }
}
public class Main {
    public static void main(String[] args) {

        Engine engine = new  Engine(40.5);
        Dashboard dashboard = new Dashboard(5.0);
        Volvo volvo = new Volvo(700,"2023","KHA123",engine,dashboard);
        volvo.drive();         
        volvo.stop();         
        volvo.changeFuel();
        volvo.checkBattery();         
        volvo.model="SUV.CI89";
        volvo.company="Volvo";
    } 
}    




17)
public class ArraySizeExample
{
    public static void main(String a[])
    {
        int size = -5;
        if(size < 0)
        {
            System.out.println("Negative Array Size");
        }
        else {
            System.out.println("Positive Array Size");
        }
        try
        {
            int a1[] = new int[size];
            System.out.println("first element : "+a1[0]);
        }
        catch(NegativeArraySizeException e)
        {
            System.out.println(e);
        }
        finally
        {
            System.out.println("The final block.");
        }

    }
}

18)
public class Throw {
    static void checkResult(float mark) {
        if (mark < 0) {
            throw new ArithmeticException("Sorry,The Mark is not Found,Thers's some Arithmetic Problems.");
        }
            else if(mark<40) {
            System.out.println("You Failed,GOOD LUCK NEXT TIME");
            }
         else {
            System.out.println("CONGRATULATIONS! You Passed.");
        }
    }

    public static void main(String[] args) {
        checkResult(-34);
    }
}

19)
class UserdefinedException extends Exception
{

}

public class TestException  //class which uses user defind exeption class
{

    public static void main(String args[])
    {
        try
        {
            throw new UserdefinedException();
        }
        catch (UserdefinedException x)
        {
            System.out.println("Made a user defined exception");
            System.out.println(x);
        }

        System.out.println("The rest of the code.");
    }
}

20)
import java.util.ArrayList;
import java.util.Collections;

public class ArrayListSort {
    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();

        numbers.add(5);
        numbers.add(2);
        numbers.add(10);
        numbers.add(1);
        numbers.add(8);

        Collections.sort(numbers);

        System.out.println("Sorted ArrayList: " + numbers);
    }
}

